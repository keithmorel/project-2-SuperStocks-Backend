package com.revature.dao;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

import java.util.HashSet;

import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.Commit;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.annotation.DirtiesContext.ClassMode;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.ContextHierarchy;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.transaction.annotation.Transactional;

import com.revature.model.User;
import com.revature.model.UserRole;

@ExtendWith(SpringExtension.class)
@ContextHierarchy({
	@ContextConfiguration("classpath:applicationContext.xml"),
	@ContextConfiguration("classpath:dispatcherContext.xml")
})
@WebAppConfiguration
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@DirtiesContext(classMode=ClassMode.BEFORE_CLASS)
class UserDAOTest {
	
	@Autowired
	private UserDAO userDAO;
	
	@Test
	@Transactional
	@Commit
	@Order(0) // Smaller numbers run before larger numbers
	void test_addUserRole_success_userRole() {
		
		UserRole actual = userDAO.addUserRole(1, "User");
		UserRole expected = new UserRole(1, "User");
		
		assertEquals(actual, expected);
		
	}
	
	@Test
	@Transactional
	@Commit
	@Order(1) // Smaller numbers run before larger numbers
	void test_getUserRole_success_userRole() {
		
		UserRole actual = userDAO.getRoleById(1);
		UserRole expected = new UserRole(1, "User");
		
		assertEquals(actual, expected);
		
	}
	
	@Test
	@Transactional
	@Commit
	@Order(2) // Smaller numbers run before larger numbers
	void test_addUserRole_success_adminRole() {
		
		UserRole actual = userDAO.addUserRole(2, "Admin");
		UserRole expected = new UserRole(2, "Admin");
		
		assertEquals(actual, expected);
		
	}
	
	@Test
	@Transactional
	@Commit
	@Order(3) // Smaller numbers run before larger numbers
	void test_getUserRole_success_adminRole() {
		
		UserRole actual = userDAO.getRoleById(2);
		UserRole expected = new UserRole(2, "Admin");
		
		assertEquals(actual, expected);
		
	}

	@Test
	@Transactional
	@Commit
	@Order(4) // Smaller numbers run before larger numbers
	void test_registerUser_hasAutoGeneratedId() {
		
		User user = userDAO.registerNewUser("username", "password", "user@gmail.com", "first", "last", 1);
		assertNotEquals(0, user.getId());

	}
	
	@Test
	@Order(5)
	void test_getUserByUsernameAndPassword_success() {
		
		UserRole userRole = userDAO.getRoleById(1);
		
		User actual = userDAO.getUserByUsernameAndPassword("username", "password");
		User expected = new User(1, "username", "5f4dcc3b5aa765d61d8327deb882cf99", "user@gmail.com", "first", "last", userRole, new HashSet<>());
		
		assertEquals(actual, expected);
		
	}
	
	@Test
	@Order(6)
	void test_updateUser_success() {
		
		UserRole userRole = userDAO.getRoleById(1);
		
		User actual = userDAO.updateUser(1, "newusername", "password", "newemail@gmail.com", "newfirst", "newlast");
		User expected = new User(1, "newusername", "5f4dcc3b5aa765d61d8327deb882cf99", "newemail@gmail.com", "newfirst", "newlast", userRole,
				new HashSet<>());
		
		assertEquals(actual, expected);
		
	}

}
